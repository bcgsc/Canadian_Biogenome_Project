params {
//Genral parameters
        id                      = "github"
        outdir                  = "."
	pipeline_version	= "V1"

//PacBio input
	pacbio_input_type	= "ccs" //'subreads' or 'ccs'
	bam_cell1		= "subset_covid_hifi.bam"
//      bam_cell2               = ""
//      bam_cell3               = ""
//      bam_cell4               = ""


//ONT input
//	ont_fastq_1		= ""

//HiC Illumina input
        hic_read1       	= "test_1.fastq.gz"
        hic_read2       	= "test_2.fastq.gz"

	Illumina_prefix		= "test"

//Illumina short reads input
//	illumina_SR_read1	= ""
//	illumina_SR_read2	= ""

//Pre-processing
//PacBio reads obtained from SickKids are CCS, not Hifi : It includes HiFi reads but also reads of lower quality.
// This threshold allow to remove reads of lower quality (equivalent to --min-rq in ccs software).
// If 'pacbio_rq'=0.99 --> output bam will contain HiFi Reads with predicted accuracy â‰¥Q20 (HiFi reads only, Probability of incorrect base call : 1 in 100), equivalent of using extracthifi software
// If 'pacbio_rq'=0.9 --> Phred Quality Score =10, Probability of incorrect base call : 1 in 10	
//  If 'pacbio_rq'=0.999 --> Phred Quality Score =30, Probability of incorrect base call : 1 in 1000
        pacbio_rq               = "0.9"


//Method
        assembly_method         = "flye"	// 'hifiasm' or 'canu' of 'flye' or 'verkko'
	assembly_secondary_mode	= "hifi"	// Depends on the assembly method selected, details in the following lines :
// With hifiasm : 'pacbio' (uses pacbio data only), 'pacbio+hic' (--h1 //--h2 : include Hi-C integration, requires Hi-C reads, VGP says that the output requires additional manual curation), 'pacbio+ont' (--ul : Ultra-long ONT integration), 'pacbio+ont+hic'
// With canu : 'hicanu' (-pacbio-hifi : uses HiFi data only), 'ont' (-nanopore : uses nanopore data only)
// With flye : 'hifi' (--pacbio-hifi mode), 'ont' (--nano-raw mode), 'pacbio+ont'
// With verkko : 'pacbio' (--hifi: uses HiFi data only), 'ont' (--nano : uses nanopore data only), 'pacbio+ont' (--hifi --nano)
	polishing_method	= "none"	// 'pilon' or 'none'
	purging_method		= "purge_dups"	//DO NOT MODIFY
	scaffolding_method	= "yahs"	// 'yahs' or 'salsa'
	manual_curation		= "none"	// DO NOT MODIFY
	mitohifi		= "no"		// 'yes' or 'no'

//If scaffolding_method == 'salsa'
	restriction_site	= "^GATC,G^ANTC,C^TNAG,T^TAA"
	ligation_site		= "GATCGATC,GANTGATC,GANTANTC,GATCANTC"
	bin_size		= "1000000"

// Additional info
	taxon_taxid		= "1"		
        taxon_name              = "sars cov"         	//From GoAT (https://goat.genomehubs.org)
        ploidy                  = "1"			//From GoAT (https://goat.genomehubs.org)
        hap_gen_size_Gb         = "0.000029"		//From GoAT (https://goat.genomehubs.org) - in Gb without the unit (Ex : in GOAT, genome size --> 1.15G, input 1.15 here)
        chrom_num		= "2"			//From GoAT (https://goat.genomehubs.org) - Number of chromosomes
        lineage                 = "vertebrata_odb10"
	lineage2		= "metazoa_odb10"
	lineage3		= "eukaryota_odb10"

//Path - Do not modify
        JUICER_JAR              = "/projects/cbp/scratch/pipeline/modules/juicer/salsa2_juicer/juicer_tools_1.22.01.jar"
        busco_lineages_path     = "/projects/cbp/scratch/busco_downloads/"
	kraken_db		= "/projects/cbp/scratch/kraken-db/"
}

process {
        executor="local"
        withLabel:'process_high' {
                cpus = 16
                memory = '300 GB'
        }
        withLabel:'process_medium' {
                cpus = 7
                memory = '200 GB'
        }
        withLabel:'process_low' {
                cpus = 3
                memory = '100 GB'
        }

//Pre-processing}   
        withName: 'BAMTOOLS_FILTER_PACBIO_CELL1|BAMTOOLS_FILTER_PACBIO_CELL2|BAMTOOLS_FILTER_PACBIO_CELL3|BAMTOOLS_FILTER_PACBIO_CELL4' {
                ext.args = [
                        params.pacbio_rq ? "-tag 'rq':'>=${params.pacbio_rq}'" : '',
                ].join(' ')
        }

//Needed to run the blobtools_pipeline script
        withName: 'BAM2FASTX|TWOBAM2FASTX|THREEBAM2FASTX|FOURBAM2FASTX' {
                publishDir = [
                        path: { "${params.outdir}/preprocessing/bam2fastx" },
                        mode : 'copy'
                ]
        }
        withName: 'CUTADAPT' {
                ext.args = '--anywhere ATCTCTCTCAACAACAACAACGGAGGAGGAGGAAAAGAGAGAGAT --anywhere ATCTCTCTCTTTTCCTCCTCCTCCGTTGTTGTTGTTGAGAGAGAT --error-rate 0.1 --overlap 35 --times 3 --revcomp --discard-trimmed'
        }

//QC Input data
        withName: 'LONGQC' {
                publishDir = [  
                        path: { "${params.outdir}/QC/LongQC" },
                        mode : 'copy'
                ]       
        }
        withName: 'MERYL_COUNT|MERYL_UNIONSUM|MERYL_HISTOGRAM' {
                ext.args = 'k=21'
        }       
        withName: 'GENOMESCOPE2' {
		ext.args = [
			'-k 21',
                        params.ploidy ? "-p ${params.ploidy}" : ''
                ].join(' ')
                publishDir = [
                        path: { "${params.outdir}/QC/genomescope2" },
                        mode : 'copy',
                        pattern : "*.png"
                ]
        }
        withName: 'KRAKEN2_KRAKEN2_PACBIO_BAM|KRAKEN2_KRAKEN2_HIC_READS|KRAKEN2_KRAKEN2_SR_READS|KRAKEN2_KRAKEN2_ONT_READS' {
                cpus=64
		memory = '400 GB'
                ext.args = '--memory-mapping --quick'
        }       

//Assembly
//HifiASM 
        withName: 'HIFIASM' {
                cpus=64
                memory = '600 GB'
		ext.args = [
			'-l 1',
			params.ploidy ? "--n-hap ${params.ploidy}" : '',
			params.hap_gen_size_Gb ? "--hg-size ${params.hap_gen_size_Gb}g" : ''
	        ].join(' ')
                publishDir = [
                        path: { "${params.outdir}/assembly/hifiasm" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]    
	}

//CANU
       withName: 'CANU' {
                ext.args = [
                        params.hap_gen_size_Gb ? "genomesize=${params.hap_gen_size_Gb}g" : ''
                ].join(' ')
                publishDir = [
                        path: { "${params.outdir}/assembly/canu" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]    
        }

//FLYE
        withName: 'FLYE|FLYE_PACBIO_ONT' {
                memory = '300 GB'
        }      
	withName: 'MINIMAP_ALIGN_FLYE' {
                ext.args = '-xmap-hifi'
        } 
        withName: 'RACON' {
                ext.args = '-m 8 -x -6 -g -8 -w 500'
        }
        withName: 'LONGSTITCH' {
                ext.args = [
			'z=100',
                        params.hap_gen_size_Gb ? "G=${params.hap_gen_size_Gb}e9" : ''
                ].join(' ')
                publishDir = [
                        path: { "${params.outdir}/assembly/flye" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]
        }
//VERKKO
        withName: 'VERKKO' {
                publishDir = [
                        path: { "${params.outdir}/assembly/verkko" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]
        }

//MitoHifi
        withName: 'MITOHIFI' {
                ext.args = '-p 40 -o 2'
                publishDir = [ 
                        path: { "${params.outdir}/mitohifi" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]       
        }  


//PILON

//PurgeDups
	withName: 'PURGEDUPS_CALCUTS|PURGEDUPS_CALCUTS_ALT' {
		ext.args = '-d 1 -u 63'
        }       
        withName: 'MINIMAP2_ALIGN_TO_CONTIG|MINIMAP2_ALIGN_TO_CONTIG_ALT' {
                ext.args = '-x asm5'
        }
        withName: 'MINIMAP2_ALIGN_TO_SELF|MINIMAP2_ALIGN_TO_SELF_ALT' {
                ext.args = '-DP -k19 -w 19 -m200'
        }
        withName: 'PURGEDUPS_GETSEQS|SAMTOOLS_FAIDX1|PURGEDUPS_GETSEQS_ALT|SAMTOOLS_FAIDX1_ALT' {
                publishDir = [  
                        path: { "${params.outdir}/purge_dups" },
                        mode : 'copy'
                ]       
        }      

//HIC scaffolding
//SALSA2
	withName: 'SALSA2' {
		ext.args = '-o scaffolds -m CLEAN -e GATC,GANTC,CTNAG,TTAA'
		publishDir = [
                        path: { "${params.outdir}/hic_scaffolding/salsa2" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]
        }

//YAHS
        withName: 'CHROMAP_CHROMAP|CHROMAP_CHROMAP_ALT' {
                ext.args = '--preset hic --remove-pcr-duplicates --SAM'
        }

        withName: 'YAHS|YAHS_ALT' {
                ext.args = '-l 10 --no-contig-ec -e GATC,GANTC,CTNAG,TTAA'
                publishDir = [ 
                        path: { "${params.outdir}/hic_scaffolding/yahs" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*.fa"
                ]       
        } 

//Assembly QC
//CONTACT Maps
        withName: 'SALSA2_JUICER|YAHS_JUICER' {
                ext.args = '-a'
                publishDir = [
                        path: { "${params.outdir}/QC/juicer" },
                        mode : 'copy'
	        ]       
        }
        withName: 'JUICER' {
                ext.args = '-S postproc'
                publishDir = [
                        path: { "${params.outdir}/QC/juicer" },
                        mode : 'copy'
                ]
        }

        withName: 'PRETEXTSNAPSHOT' {
		ext.args = '--sequences "=full, =all"'
                cpus=4
		memory = '100 GB'
		publishDir = [
                        path: { "${params.outdir}/QC/pretext" },
                        mode : 'copy'
                ]       
        }

//Assembly continuity
//MERQURY
	withName: 'MERQURY1|MERQURY2|MERQURY3|MERQURY1_DOUBLE|MERQURY2_DOUBLE|MERQURY3_DOUBLE' { 
                publishDir = [
                        path: { "${params.outdir}/QC/merqury" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]
        }

        withName: 'QUAST1|QUAST1_DOUBLE' {
                ext.args2 = [
                        params.hap_gen_size_Gb ? "hap_gen_size_bp=\$(echo ${params.hap_gen_size_Gb} | awk '{print \$1 * 1000000000}')" : ''
                ].join(' ')
                ext.args = [
                        params.hap_gen_size_Gb ? "--est-ref-size \$hap_gen_size_bp" : ''
                ].join(' ') 
                publishDir = [
                        path: { "${params.outdir}/QC/quast1" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
			pattern : "*.tsv"
                ]       
        }
        withName: 'QUAST2|QUAST2_DOUBLE' {
                ext.args2 = [
                        params.hap_gen_size_Gb ? "hap_gen_size_bp=\$(echo ${params.hap_gen_size_Gb} | awk '{print \$1 * 1000000000}')" : ''
                ].join(' ')
                ext.args = [
                        params.hap_gen_size_Gb ? "--est-ref-size \$hap_gen_size_bp" : ''
                ].join(' ')
                publishDir = [
                        path: { "${params.outdir}/QC/quast2" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*.tsv"
                ]
        }
        withName: 'QUAST_PILON' {
                ext.args2 = [
                        params.hap_gen_size_Gb ? "hap_gen_size_bp=\$(echo ${params.hap_gen_size_Gb} | awk '{print \$1 * 1000000000}')" : ''
                ].join(' ')
                ext.args = [
                        params.hap_gen_size_Gb ? "--est-ref-size \$hap_gen_size_bp" : ''
                ].join(' ')
                publishDir = [
                        path: { "${params.outdir}/QC/quast_pilon" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*.tsv"
                ]       
        }  
        withName: 'QUAST3|QUAST3_DOUBLE' {
                ext.args2 = [
                        params.hap_gen_size_Gb ? "hap_gen_size_bp=\$(echo ${params.hap_gen_size_Gb} | awk '{print \$1 * 1000000000}')" : ''
                ].join(' ')
                ext.args = [
                        params.hap_gen_size_Gb ? "--est-ref-size \$hap_gen_size_bp" : ''
                ].join(' ')
                publishDir = [
                        path: { "${params.outdir}/QC/quast3" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*.tsv"
                ]
        }

// Completeness
        withName: 'BUSCO|BUSCO_ALT' {
                ext.args = '--mode genome'
		publishDir = [
                        path: { "${params.outdir}/QC/busco1" },
                        mode : 'copy',
			pattern : "short_summary.*.txt"
		]
	}
        withName: 'BUSCO_lin2|BUSCO_lin3|BUSCO_lin4|BUSCO_lin2ALT|BUSCO_lin3ALT|BUSCO_lin4ALT' {
                ext.args = '--mode genome'
	}

//MultiQC
        withName: 'MULTIQC' {
                publishDir = [ 
                        path: { "${params.outdir}/QC/multiqc" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
			pattern : "*_report.html"
                ]
                publishDir = [
                        path: { "${params.outdir}/QC/multiqc" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*.json"
                ]
	}

//Overview
        withName: 'OVERVIEW_GENERATION_SAMPLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/overview" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                ]
	}

//BLOBTOOLSKIT
        withName: 'GZIP' {
                publishDir = [
                        path: { "${params.outdir}/blobtools/" },
                        mode : 'copy',
                        saveAs: { filename -> "$filename" }
                ]
        }
        withName: 'BLOBTOOLS_VIEW_SNAIL|BLOBTOOLS_VIEW_BLOB|BLOBTOOLS_VIEW_CUMULATIVE' {
                publishDir = [
                        path: { "${params.outdir}/blobtools/" },
                        mode : 'copy'
                ]
        }
}


env {
        TMP                             = "/tmp/"
        NXF_TEMP                        = "/tmp/"
        TMPDIR                          = "/tmp/"
        NXF_SINGULARITY_CACHEDIR        = "/singularity/"
        SINGULARITY_CACHEDIR            = "/singularity/"
        NXF_WORK                        = "/tmp/"
        SINGULARITY_TMPDIR              = "/tmp/"
        NXF_SINGULARITY_TMPDIR          = "/tmp/"
}

singularity {
        envWhitelist    = "SINGULARITY_TMPDIR, TMPDIR"
        autoMounts      = true
        enabled         = true
        runOptions      = '-e -W /tmp/ -B /projects,/home -B "$TMPDIR"'
        cacheDir        = "/singularity/"
}

cache = 'lenient'

conda {
        enabled         = true
        cacheDir        = "/conda/"
}

