params {
//Specie parameters
	id                      = "github"
taxon_taxid = "50000"
//	taxon_taxid             = "1830378"
	related_genome		= "GCA_002816235.1"		// optional, will be used to generate the Jupiter plot
	string_telomere		= "TTAGGG"
	pipeline_version        = "V2"    

//Optional (if not indicated, autolineage for busco)
//	lineage                 = ""
//	lineage2                = "vertebrata_odb10"
//	lineage3                = "metazoa_odb10"
//	lineage4                = "eukaryota_odb10"

//Data input
	raw_data_path		= "$baseDir/example_input/"
//PacBio input
	pacbio_input_type	= "ccs" // 'hifi' or 'ccs' or 'clr' - HiFi mode: skips filtering
	bam_cell1		= "${raw_data_path}/subset_covid_hifi.bam"
//	bam_cell2               = "${raw_data_path}/pacbio/"
//	bam_cell3               = "${raw_data_path}/pacbio/"
//	bam_cell4               = "${raw_data_path}/pacbio/"

//HiC Illumina input
	hic_read1               = "${raw_data_path}/test_1.fastq.gz"
	hic_read2               = "${raw_data_path}/test_2.fastq.gz"
	Illumina_prefix         = "test"

//ONT input
//	ont_fastq_1		= "${raw_data_path}/nanopore/"

//Illumina short reads input
//	illumina_SR_read1	= "${raw_data_path}/SR/"
//	illumina_SR_read2	= "${raw_data_path}/SR/"

//Pre-processing
//PacBio reads obtained from SickKids are CCS, not Hifi : It includes HiFi reads but also reads of lower quality.
// This threshold allow to remove reads of lower quality (equivalent to --min-rq in ccs software).
// If 'pacbio_rq'=0.99 --> output bam will contain HiFi Reads with predicted accuracy â‰¥Q20 (HiFi reads only, Probability of incorrect base call : 1 in 100), equivalent of using extracthifi software
// If 'pacbio_rq'=0.9 --> Phred Quality Score =10, Probability of incorrect base call : 1 in 10	
//  If 'pacbio_rq'=0.999 --> Phred Quality Score =30, Probability of incorrect base call : 1 in 1000
// For CLR, set 'pacbio_rq'=0.1 to keep all the CLR reads. Canu will deal with them
        pacbio_rq               = "0.9"

//Method
        assembly_method         = "hifiasm"	// 'hifiasm' or 'canu' of 'flye' or 'verkko'
	assembly_secondary_mode	= "pacbio"	// Depends on the assembly method selected, details in the following lines :
	hap2			= "no"		// With hifiasm, it is possible to process hap2

// With hifiasm : 'pacbio' (uses pacbio data only), 'pacbio+hic' (--h1 //--h2 : include Hi-C integration, requires Hi-C reads, VGP says that the output requires additional manual curation), 'pacbio+ont' (--ul : Ultra-long ONT integration), 'pacbio+ont+hic'
// With canu : 'hicanu' (-pacbio-hifi : uses HiFi data only), 'ont' (-nanopore : uses nanopore data only), 'clr' (-pacbio : for clr reads (lower quality than hifi))
// With flye : 'hifi' (--pacbio-hifi mode), 'ont' (--nano-raw mode), 'pacbio+ont', 'clr' (--pacbio-raw)
// With verkko : 'pacbio' (--hifi: uses HiFi data only), 'ont' (--nano : uses nanopore data only), 'pacbio+ont' (--hifi --nano)
	polishing_method	= "none"	// 'pilon' or 'none'
	purging_method		= "purge_dups"	// "purge_dups" or "no"
	scaffolding_method	= "yahs"	// 'yahs' or 'salsa'

//Optional steps
	mitohifi		= "no"		// 'yes' or 'no' - Geneerate the mitochondrial assembly
	execute_kraken		= "no"		// 'yes' or 'no' - Assigning taxonomic labels to short DNA sequences
	fcs			= "no"		// 'yes' or 'no' - Foreign contamination screening
	methylation_calling	= "no"		// 'yes' or 'no'
	juicer			= "no"		// 'yes' or 'no' - HiC contact map
	genome_comparison	= "no"		// 'yes' or 'no' - Jupiter plots using circos
	blobtools		= "no"		// 'yes' or 'no' - Overview of data quality
	pretext			= "no"		// 'yes' or 'no' - HiC contact map
	run_busco		= "no"		// 'yes' or 'no'
	busco_extend		= "limited"	// 'every_step' or 'limited'
        manual_curation         = "none"        // 'yes' or 'no' - This parameter doesn't change the pipeline, it is only used to track which assemblies have been manually curated

//If scaffolding_method == 'salsa'
	restriction_site	= "^GATC,G^ANTC,C^TNAG,T^TAA"
	ligation_site		= "GATCGATC,GANTGATC,GANTANTC,GATCANTC"
	bin_size		= "1000000"

//Path - Do not modify
	scratch_dir		= "/projects/cbp/scratch/"
        outdir                  = "${scratch_dir}/${id}/${pipeline_version}/"
        busco_lineages_path     = "${scratch_dir}/busco_downloads/"
	kraken_db		= "${scratch_dir}/kraken-db/"
	singularity_cache	= "${scratch_dir}/singularity/"
        fcs_gx_database         = "${scratch_dir}/fcs_gx/gxdb/all"
        blobtoolkit_path        = "${scratch_dir}/blobtoolkit"
        modules_path            = "${scratch_dir}/pipeline/modules/"

        JUICER_JAR              = "${singularity_cache}/juicer_tools_1.22.01.jar"
	Blobtoolkit_db		= "/projects/CanSeq/BlobtoolkitDatabase/"
	email_adress		= "scorreard@bcgsc.ca"
}

process {
	cache = 'lenient'
        executor= "local"  // "local" or "slurm"
        withLabel:'process_high' {
                cpus = 60
                memory = '300 GB'
        }
        withLabel:'process_medium' {
                cpus = 30
                memory = '200 GB'
        }
        withLabel:'process_low' {
                cpus = 3
                memory = '100 GB'
        }


        withName: 'GOAT_TAXONSEARCH' {
                ext.args = "-P -k -G"
        }

//Pre-processing   
        withName: 'BAMTOOLS_FILTER_PACBIO' {
                ext.args = [
                        params.pacbio_rq ? "-tag 'rq':'>=${params.pacbio_rq}'" : '',
                ].join(' ')
        }

//Needed to run the blobtools_pipeline script
        withName: 'BAM2FASTX' {
                publishDir = [
                        path: { "${params.outdir}/preprocessing/bam2fastx" },
                        mode : 'copy',
                        pattern : "*.fastq.gz"
                ]
        }

	withName: 'PREPROCESS_MERGED' {
                ext.args_bamtools_filter = [
                        params.pacbio_rq ? "-tag 'rq':'>=${params.pacbio_rq}'" : '',
                ].join(' ')
                publishDir = [
                        path: { "${params.outdir}/preprocessing/bam2fastx" },
                        mode : 'copy',
                        pattern : "*.fastq.gz"
                ]
	}

        withName: 'CUTADAPT' {
                ext.args = '--anywhere ATCTCTCTCAACAACAACAACGGAGGAGGAGGAAAAGAGAGAGAT --anywhere ATCTCTCTCTTTTCCTCCTCCTCCGTTGTTGTTGTTGAGAGAGAT --error-rate 0.1 --overlap 35 --times 3 --revcomp --discard-trimmed'
        }

//QC Input data
        withName: 'LONGQC_PACBIO' {
                ext.args = '-x pb-sequel'
                publishDir = [  
                        path: { "${params.outdir}/QC/input_data/LongQC_PacBio" },
                        mode : 'copy'
                ]       
        }
        withName: 'LONGQC_ONT' {
                ext.args = '-x ont-rapid'
                publishDir = [
                        path: { "${params.outdir}/QC/input_data/LongQC_ONT" },
                        mode : 'copy'
                ]
        }
        withName: 'MERYL_COUNT|MERYL_UNIONSUM|MERYL_HISTOGRAM' {
                ext.args = 'k=21'
        }       
        withName: 'GENOMESCOPE2' {
		ext.args = '-k 21'
                publishDir = [
                        path: { "${params.outdir}/QC/input_data/genomescope2" },
                        mode : 'copy',
                        pattern : "*.png"
                ]
        }
        withName: 'KRAKEN2_KRAKEN2_PACBIO_BAM|KRAKEN2_KRAKEN2_HIC_READS|KRAKEN2_KRAKEN2_SR_READS|KRAKEN2_KRAKEN2_ONT_READS' {
                cpus=64
		memory = '400 GB'
                ext.args = '--memory-mapping --quick'
        }       

//Assembly
//HifiASM 
        withName: 'HIFIASM' {
                cpus=64
                memory = '600 GB'
		ext.args = '-l 1'
                publishDir = [
                        path: { "${params.outdir}/assembly/1_contig/hifiasm" },
                        mode : 'copy',
                        saveAs: { filename -> "$filename" }
                ]    
	}

//CANU
       withName: 'CANU' {
		publishDir = [
                        path: { "${params.outdir}/assembly/1_contig/canu" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]    
        }

//FLYE
        withName: 'FLYE|FLYE_PACBIO_ONT' {
                memory = '300 GB'
        }      
	withName: 'MINIMAP_ALIGN_FLYE' {
                ext.args = '-xmap-hifi'
        } 
        withName: 'RACON' {
                ext.args = '-m 8 -x -6 -g -8 -w 500'
        }
        withName: 'LONGSTITCH' {
                ext.args = 'z=100'
                publishDir = [
                        path: { "${params.outdir}/assembly/1_contig/flye" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]
        }
//VERKKO
        withName: 'VERKKO' {
                publishDir = [
                        path: { "${params.outdir}/assembly/1_contig/verkko" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]
        }

//MitoHifi
        withName: 'MITOHIFI' {
                ext.args = '-p 40 -o 2'
                publishDir = [ 
                        path: { "${params.outdir}/assembly/mitohifi" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]       
        }  


//PILON

////Assembly cleaning
        withName: 'FCS_FCSADAPTOR_hap1|FCS_FCSADAPTOR_ALT' {
                ext.args = '--euk'
                publishDir = [
                        path: { "${params.outdir}/assembly/2_FCS/fcs_adaptor_cleaned/" },
                        mode : 'copy',
                        saveAs: { filename -> "$filename" },
                ]       
        }       
        
        withName: 'FCS_FCSGX_hap1|FCS_FCSGX_ALT' {
                memory = '600 GB'
                cpus=42
                publishDir = [
                        path: { "${params.outdir}/assembly/2_FCS/fcs_gx_cleaned/" },
                        mode : 'copy',
                        saveAs: { filename -> "$filename" },
                ]       
        }       
        
        withName: 'FCS_FCSGX_CLEAN_hap1|FCS_FCSGX_CLEAN_ALT' {
                publishDir = [
                        path: { "${params.outdir}/assembly/2_FCS/fcs_gx_cleaned/" },
                        mode : 'copy',
                        saveAs: { filename -> "$filename" },
                ]       
        } 

//PurgeDups
	withName: 'PURGEDUPS_CALCUTS_hap1|PURGEDUPS_CALCUTS_ALT' {
		ext.args = '-d 1 -u 63'
        }       
        withName: 'MINIMAP2_ALIGN_TO_CONTIG_hap1|MINIMAP2_ALIGN_TO_CONTIG_ALT' {
                ext.args = '-x asm5'
        }
        withName: 'MINIMAP2_ALIGN_TO_SELF_hap1|MINIMAP2_ALIGN_TO_SELF_ALT' {
                ext.args = '-DP -k19 -w 19 -m200'
        }
        withName: 'PURGEDUPS_GETSEQS_hap1|SAMTOOLS_FAIDX1|PURGEDUPS_GETSEQS_ALT|SAMTOOLS_FAIDX1_ALT' {
                publishDir = [  
                        path: { "${params.outdir}/assembly/3_purged/purge_dups" },
                        mode : 'copy'
                ]       
        }      

//HIC scaffolding
//SALSA2
	withName: 'SALSA2' {
		ext.args = '-o scaffolds -m CLEAN -e GATC,GANTC,CTNAG,TTAA'
		publishDir = [
                        path: { "${params.outdir}/assembly/4_scaffold/salsa2" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]
        }

//YAHS
        withName: 'CHROMAP_CHROMAP_hap1|CHROMAP_CHROMAP_ALT' {
                ext.args = '--preset hic --remove-pcr-duplicates --SAM'
        }

        withName: 'YAHS_ALT' {
                ext.args = '-l 10 --no-contig-ec -e GATC,GANTC,CTNAG,TTAA'
                publishDir = [ 
                        path: { "${params.outdir}/assembly/4_scaffold/yahs" },
                        mode : 'copy',
                        saveAs: { filename -> "$filename" },
                        pattern : "*.fa"
                ]       
        } 

        withName: 'YAHS_hap1' {
                ext.args = '-l 10 --no-contig-ec -e GATC,GANTC,CTNAG,TTAA'
                publishDir = [
                        path: { "${params.outdir}/manualcuration/" },
                        mode : 'copy',
                ]    
	        publishDir = [
                        path: { "${params.outdir}/assembly/4_scaffold/yahs" },
                        mode : 'copy',
                        saveAs: { filename -> "$filename" },
                        pattern : "*.fa"
                ]
	}

//Assembly QC
//CONTACT Maps
        withName: 'SALSA2_JUICER|YAHS_JUICER' {
                ext.args = '-a'
                publishDir = [
                        path: { "${params.outdir}/QC/juicer/scaffold/" },
                        mode : 'copy'
	        ]       
        }
        withName: 'JUICER' {
                ext.args = '-S postproc'
                publishDir = [
                        path: { "${params.outdir}/QC/juicer/scaffold/" },
                        mode : 'copy'
                ]
        }

        withName: 'PRETEXTMAP' {
                publishDir = [
                        path: { "${params.outdir}/QC/pretext/pretext/scaffold/" },
                        mode : 'copy'
                ]
	}
        withName: 'PRETEXTGRAPH_TELO_COV|PRETEXTGRAPH_TELO' {
	        publishDir = [
                        path: { "${params.outdir}/manualcuration/" },
                        mode : 'copy',
                ]
                publishDir = [
                        path: { "${params.outdir}/QC/pretext/pretext/scaffold/" },
                        mode : 'copy'
                ]       
        }

        withName: 'PRETEXTSNAPSHOT' {
		ext.args = '--sequences "=full, =all"'
                cpus=4
		memory = '100 GB'
                publishDir = [
                        path: { "${params.outdir}/QC/pretext/pretext/scaffold/" },
                        mode : 'copy'
                ]
        }



//Assembly continuity
//MERQURY
        withName: 'MERQURY_ASS|MERQURY_ASS_DOUBLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/merqury/contig/" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]       
        } 

        withName: 'MERQURY_PURGED|MERQURY_PURGED_DOUBLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/merqury/purged" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]
        }

        withName: 'MERQURY_SCAFF|MERQURY_SCAFF_DOUBLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/merqury/scaffold" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" }
                ]       
        }  

        withName: 'QUAST_ASS|QUAST_ASS_DOUBLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/quast/contig/" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
			pattern : "report.tsv"
                ]       
        }

        withName: 'QUAST_PILON' {
                publishDir = [
                        path: { "${params.outdir}/QC/quast/pilon/" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "report.tsv"
                ]
        }

        withName: 'QUAST_CLEAN|QUAST_CLEAN_DOUBLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/quast/FCS/" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "report.tsv"
                ]
        }

        withName: 'QUAST_PURGED|QUAST_PURGED_DOUBLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/quast/purged/" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "report.tsv"
                ]
        }

        withName: 'QUAST_SCAFF|QUAST_SCAFF_DOUBLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/quast/scaffold/" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "report.tsv"
                ]
        }

// Completeness
        withName: 'BUSCO_lin1_PRIM' {
                memory = '700 GB'
                cpus=32
                ext.args = '--mode genome'
		publishDir = [
                        path: { "${params.outdir}/QC/busco/contig_hap1_lin1" },
                        mode : 'copy',
			pattern : "short_summary.*.txt"
		]
                publishDir = [
                        path: { "${params.outdir}/QC/busco/contig_hap1_lin1" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*full_table.tsv"
                ]
	}
        withName: 'BUSCO_lin1_cleaned' {
                memory = '700 GB'
                cpus=32
                ext.args = '--mode genome'
                publishDir = [
                        path: { "${params.outdir}/QC/busco/FCS_hap1_lin1" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*full_table.tsv"
                ]
                publishDir = [
                        path: { "${params.outdir}/QC/busco/FCS_hap1_lin1" },
                        mode : 'copy',
                        pattern : "short_summary.*.txt"
                ] 
        }
        withName: 'BUSCO_lin1_purged' {
                memory = '700 GB'
                cpus=32
                ext.args = '--mode genome'
                publishDir = [
                        path: { "${params.outdir}/QC/busco/purged_hap1_lin1" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "short_summary.*.txt"
                ]
                publishDir = [
                        path: { "${params.outdir}/QC/busco/purged_hap1_lin1" },
                        mode : 'copy',
                        pattern : "short_summary.*.txt"
                ]
        }
        withName: 'BUSCO_lin1_SCAFF' {
                memory = '700 GB'
                cpus=32
                ext.args = '--mode genome'
                publishDir = [
                        path: { "${params.outdir}/QC/busco/scaffold_hap1_lin1" },
                        mode : 'copy',
                        pattern : "short_summary.*.txt"
                ]
                publishDir = [
                        path: { "${params.outdir}/QC/busco/scaffold_hap1_lin1" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*full_table.tsv"
                ]
        }
        withName: 'BUSCO_lin2' {
                memory = '700 GB'
                cpus=32
                ext.args = '--mode genome'
                publishDir = [
                        path: { "${params.outdir}/QC/busco/hap1_lin2" },
                        mode : 'copy',
                        pattern : "short_summary.*.txt"
                ]
                publishDir = [ 
                        path: { "${params.outdir}/QC/busco/hap1_lin2" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*full_table.tsv"
                ]         
        } 
        withName: 'BUSCO_lin3' {
                memory = '700 GB'
                cpus=32
                ext.args = '--mode genome'
                publishDir = [
                        path: { "${params.outdir}/QC/busco/hap1_lin3" },
                        mode : 'copy',
                        pattern : "short_summary.*.txt"
                ]
                publishDir = [ 
                        path: { "${params.outdir}/QC/busco/hap1_lin3" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*full_table.tsv"
                ]
        }
        withName: 'BUSCO_lin4' {
                memory = '700 GB'
                cpus=32
                ext.args = '--mode genome'
                publishDir = [
                        path: { "${params.outdir}/QC/busco/hap1_lin4" },
                        mode : 'copy',
                        pattern : "short_summary.*.txt"
                ]
                publishDir = [ 
                        path: { "${params.outdir}/QC/busco/hap1_lin4" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*full_table.tsv"
                ] 
        }
        withName: 'BUSCO_ALT' {
                memory = '700 GB'
                cpus=32
                ext.args = '--mode genome'
                publishDir = [
                        path: { "${params.outdir}/QC/busco/hap2_lin1" },
                        mode : 'copy',
                        pattern : "short_summary.*.txt"
                ]
                publishDir = [
                        path: { "${params.outdir}/QC/busco/hap2_lin1" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*full_table.tsv"
                ] 
        }

//Methylation
        withName: 'JASMINE|PBMM2|SAMTOOLS_INDEX_PBMM2' {
                publishDir = [ 
                        path: { "${params.outdir}/methylation/" },
                        mode : 'copy',
                ]
        }

//BLOBTOOLSKIT
        withName: 'GZIP|BLOBTOOLS_CONFIG|BLOBTOOLS_PIPELINE|BLOBTOOLS_CREATE|BLOBTOOLS_ADD|BLOBTOOLS_VIEW' {
                publishDir = [
                        path: { "${params.outdir}/QC/blobtools/" },
                        mode : 'copy',
                ]
        }

        withName: 'RAPIDCURATION_SPLIT' {
                publishDir = [
                        path: { "${params.outdir}/manualcuration/" },
                        mode : 'copy',
                ]
        }

// Genome COmparison
        withName: 'NCBIGENOMEDOWNLOAD' {
                ext.args = [
                        params.related_genome ? "-s genbank -A ${params.related_genome} --formats fasta all" : ''
                ].join(' ')
        }
        withName: 'MASHMAP' {
                ext.args = '-f one-to-one --pi 95 -s 100000'
                publishDir = [
                        path: { "${params.outdir}/QC/mashmap/scaffold/" },
                        mode : 'copy',
                ]
        }
        withName: 'JUPITER' {
                ext.args = 'ng=90'
                publishDir = [
                        path: { "${params.outdir}/QC/jupiter/scaffold/" },
                        mode : 'copy',
                ]       
        } 

        withName: 'BEDTOOLS_GENOMECOV' {
	        ext.args = '-bga'
        }

//MultiQC
        withName: 'MULTIQC' {
                ext.args = '--fullnames --force'
                publishDir = [
                        path: { "${params.outdir}/QC/multiqc" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                        pattern : "*_report.html"
                ]
        }

//Overview
        withName: 'OVERVIEW_GENERATION_SAMPLE' {
                publishDir = [
                        path: { "${params.outdir}/QC/overview" },
                        mode : 'copy',
                        saveAs: { filename -> "${params.id}_$filename" },
                ]
        }

        withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
                publishDir = [
                        path: { "${params.outdir}/QC/versions/" },
                        mode : 'copy',
                ]
        }

}


env {
        TMP                             = "/projects/cbp/scratch/tmp/"
        TMPDIR                          = "/projects/cbp/scratch/tmp/"
        SINGULARITY_CACHEDIR            = "/projects/cbp/scratch/singularity/"
        SINGULARITY_TMPDIR              = "/projects/cbp/scratch/tmp/"
}

singularity {
        envWhitelist    = "SINGULARITY_TMPDIR, TMPDIR"
        autoMounts      = true
        enabled         = true
        runOptions      = '-e -W /projects/cbp/scratch/tmp/ -B /projects,/gsc,/home -B "$TMPDIR"'
        cacheDir        = "/projects/cbp/scratch/singularity/"
}

conda {
        enabled         = true
        cacheDir        = "/projects/cbp/scratch/conda/"
}

